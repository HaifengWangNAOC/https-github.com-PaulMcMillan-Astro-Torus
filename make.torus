################################################################################
#
# make.torus
#
# dependencies & rules for routines related to the torus project
#
# macros that depend on the architecture etc, such as CFLAGS, LDFLAG ...,
# have to be defined elsewhere.
#
################################################################################
#
# 0   macros
#


ARTOR     = $(AR) $(LIB)libTorus.a $@; $(RL) $(LIB)libTorus.a
ARPOT     = $(AR) $(LIB)libPot.a $@;	$(RL) $(LIB)libPot.a
AROTHER   = $(AR) $(LIB)libOther.a $@; $(RL) $(LIB)libOther.a
ARLIB	  = $(AR) $(LIB)libWD.a $@; $(RL) $(LIB)libWD.a

################################################################################
#
# 1   header files
# 1.1 header files: from other directories
#

Pi_h		   = $(INCL)Pi.h
WDMath_h	   = $(INCL)WDMath.h
Random_h	   = $(INCL)Random.h
Compress_h	   = $(INCL)Compress.h
FreeMemory_h	   = $(INCL)FreeMemory.h
Vector_h	   = $(INCL)Vector.h 
Matrix_h	   = $(INCL)Matrix.h $(Vector_h)
Numerics_templates = $(INCL)Numerics.templates $(Matrix_h)
Numerics_h	   = $(INCL)Numerics.h $(Matrix_h) $(Pi_h) $(Numerics_templates)
Pspline_h	   = $(INCL)Pspline.h $(FreeMemory_h) $(Numerics_h)
PJMNum_h	   = $(SRCUTILS)PJMNum.h 
PJMebf_h	   = $(SRCUTILS)PJMebf.h 
CHB_h		   = $(SRCUTILS)CHB.h

AUXIL_H		   = $(Pi_h) $(Random_h) $(Compress_h)   \
			$(FreeMemory_h) $(Vector_h) $(Matrix_h) \
			$(Numerics_templates) $(Numerics_h) $(Pspline_h) \
			$(PJMNum_h) $(CHB_h)

#
# 1.2 header files: basic & the torus machinery
#

PSP_h		= $(INC)PSP.h
Err_h 		= $(INC)Err.h
Units_h 	= $(SRCUTILS)Units.h
Types_h 	= $(SRCUTILS)Types.h $(PSP_h)
Potential_h 	= $(INC)Potential.h $(Types_h)
Maps_h		= $(INC)Maps.h $(Pi_h) $(Err_h) $(Types_h)
Constants_h	= $(SRCUTILS)Constants.h $(Units_h)		
PJMCoords_h	= $(SRCUTILS)PJMCoords.h $(Constants_h)
Isochrone_h	= $(INC)Isochrone.h $(Maps_h)
PTCh_tr_h	= $(INC)PTCh_tr.h $(Maps_h) $(CHB_h)
noPT_h		= $(INC)noPT.h $(Maps_h)
PointTrans_h	= $(PTCh_tr_h) $(noPT_h) 
Orb_h		= $(INC)Orb.h $(Maps_h) $(Potential_h) $(Numerics_h)
Fit_h		= $(INC)Fit.h $(Maps_h) $(Potential_h)
Torus_h		= $(INC)Torus.h	$(Maps_h) $(Vector_h) $(Matrix_h) \
			$(Potential_h) $(PJMCoords_h)
#IntegClasses_h	= $(INC)IntegClasses.h $(Torus_h) $(GCstar_h)
DF_h		= $(INC)DF.h

#
# 1.3 header files: the potentials
#

Stackel_h	= $(SRCPOT)Stackel.h $(Potential_h)
MiyamotoNagai_h	= $(SRCPOT)MiyamotoNagai.h $(Potential_h)
LogPot_h	= $(SRCPOT)LogPot.h $(Potential_h)
falPot_h	= $(SRCPOT)falPot.h $(Potential_h)

#
# 1.5 header files: pseudo targets
#

BASIC_H		= $(Units_h) $(Types_h) $(PJMCoords_h)
TORFIT_H	= $(BASIC) $(Maps_h) $(Torus_h) $(Fit_h) $(Isochrone_h) \
			$(PointTrans_h) $(IntegClasses_h) $(DF_h) $(AUXIL_H)
GALPOT_H	= $(Potential_h) $(Stackel_h)\
			$(MiyamotoNagai_h) $(falPot_h) $(AUXIL_H)
OTHER_H		= $(AUXIL_H)

################################################################################
#
# modules: standard version
#


$(OBJ)Random.o:		$(SRCUTILS)Random.cc $(Random_h) $(Numerics_h)
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)

$(OBJ)Numerics.o:	$(SRCUTILS)Numerics.cc $(Numerics_h) $(FreeMemory_h)
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)
$(OBJ)WDMath.o:		$(SRCUTILS)WDMath.cc $(WDMath_h) 
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)
$(OBJ)Compress.o:	$(SRCUTILS)Compress.cc $(Compress_h) $(FreeMemory_h) \
			$(Numerics_h)
			$(CPP) $(CFLAGS_WD) $< ; $(ARLIB)


Library:	$(OBJ)Random.o $(OBJ)Numerics.o $(OBJ)WDMath.o $(OBJ)Compress.o

################################################################################
#
# analysis & other: standard version
#

$(OBJ)CHB.o:	$(SRCUTILS)CHB.cc $(CHB_h)
		$(CPP) $(CFLAGS) $< ; $(AROTHER)
$(OBJ)PJMNum.o:	$(SRCUTILS)PJMNum.cc $(PJMNum_h)
		$(CPP) $(CFLAGS) $< ; $(AROTHER)
$(OBJ)PJMCoords.o:	$(SRCUTILS)PJMCoords.cc $(PJMCoords_h) $(Pi_h)
	$(CPP) $(CFLAGS) $< ; $(AROTHER)
$(OBJ)PJMebf.o:	$(SRCUTILS)PJMebf.cc $(PJMebf_h)
		$(CPP) $(CFLAGS) $< ; $(AROTHER)

Other:	$(OBJ)PJMNum.o $(OBJ)CHB.o $(OBJ)PJMCoords.o $(OBJ)PJMebf.o



$(OBJ)Err.o:	$(SRC)Err.cc $(Err_h)
	$(CPP) $(CFLAGS) $(SRC)Err.cc; $(ARTOR)
$(OBJ)Fit.o:	$(SRC)Fit.cc $(Fit_h) \
	$(Err_h) $(Orb_h) $(Numerics_h) $(FreeMemory_h)
	$(CPP) $(CFLAGS) $(SRC)Fit.cc; $(ARTOR)
$(OBJ)Isochrone.o:	$(SRC)Isochrone.cc $(Isochrone_h) \
	$(Compress_h) $(Numerics_h)
	$(CPP) $(CFLAGS) $(SRC)Isochrone.cc; $(ARTOR)
$(OBJ)Maps.o:	$(SRC)Maps.cc $(Maps_h) \
	$(Compress_h) $(Numerics_h)
	$(CPP) $(CFLAGS) $(SRC)Maps.cc; $(ARTOR)
$(OBJ)Orb.o:	$(SRC)Orb.cc $(Orb_h)
	$(CPP) $(CFLAGS) $(SRC)Orb.cc; $(ARTOR)
$(OBJ)noPT.o:	 $(SRC)noPT.cc $(PointTrans_h) \
	$(Compress_h) $(Pi_h) $(WDMath_h)
	$(CPP) $(CFLAGS) $(SRC)noPT.cc; $(ARTOR)
$(OBJ)PTCh_tr.o:    		$(SRC)PTCh_tr.cc $(PTCh_tr_h) \
	$(Compress_h) $(Pi_h) $(WDMath_h) 
	$(CPP) $(CFLAGS) $(SRC)PTCh_tr.cc; $(ARTOR)
$(OBJ)Torus.o:	$(SRC)Torus.cc $(Torus_h) \
	$(PointTrans_h) $(Isochrone_h) $(Compress_h) $(Numerics_h)
	$(CPP) $(CFLAGS) $(SRC)Torus.cc; $(ARTOR)

TorFit:	$(OBJ)Err.o $(OBJ)Fit.o $(OBJ)Maps.o \
	$(OBJ)PTCh_tr.o $(OBJ)Isochrone.o $(OBJ)Orb.o $(OBJ)noPT.o \
	$(OBJ)Torus.o



################################################################################
#
# potentials: standard version
#

$(OBJ)Stackel.o: $(Stackel_h) $(SRCPOT)Stackel.cc
	$(CPP) $(CFLAGS) $(SRCPOT)Stackel.cc; $(ARPOT)
$(OBJ)MiyamotoNagai.o: $(MiyamotoNagai_h) $(SRCPOT)MiyamotoNagai.cc
	$(CPP) $(CFLAGS) $(SRCPOT)MiyamotoNagai.cc; $(ARPOT)
$(OBJ)LogPot.o: $(LogPot_h) $(SRCPOT)LogPot.cc
	$(CPP) $(CFLAGS) $(SRCPOT)LogPot.cc; $(ARPOT)
$(OBJ)PotIso.o: $(PotIso_h) $(SRCPOT)PotIso.cc
	$(CPP) $(CFLAGS) $(SRCPOT)PotIso.cc; $(ARPOT)
$(OBJ)falPot.o: $(falPot_h) $(SRCPOT)falPot.cc \
	      $(FreeMemory_h) $(Numerics_h) $(Pspline_h)
	      $(CPP) $(CFLAGS) $(SRCPOT)falPot.cc;$(ARPOT)

GalPot:	$(OBJ)falPot.o $(OBJ)MiyamotoNagai.o $(OBJ)Stackel.o $(OBJ)PotIso.o $(OBJ)LogPot.o


MAIN_LIBS:	TorFit GalPot Other

################################################################################
#
# executables: standard version
#
testfalPot:	$(EXE)testfalPot.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LPOT)
GiveListProps:	$(EXE)GiveListProps.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
AUTOTORUS:	$(EXE)AUTOTORUS.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
AUTOTORI:	$(EXE)AUTOTORI.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
READLIST:	$(EXE)READLIST.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Choose_any_df:	$(EXE)Choose_any_df.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Create_DF_tori:	$(EXE)Create_DF_tori.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Sample_list_limits:	$(EXE)Sample_list_limits.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Orbit_basic:	$(EXE)Orbit_basic.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Coord_converter:	$(EXE)Coord_converter.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Add_Uncert:	$(EXE)Add_Uncert.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)
Rot_Curve:	$(EXE)Rot_Curve.cc MAIN_LIBS
		$(CPP) $(MFLAGS) $(EXE)$@.cc $(LDFLAGS)



mains: Library TorFit GalPot Other testfalPot GiveListProps AUTOTORUS \
       AUTOTORI READLIST Choose_any_df Create_DF_tori \
       Sample_list_limits Orbit_basic Coord_converter Add_Uncert \
       Rot_Curve

